{"version":3,"sources":["components/cards/Card.jsx","components/chart/Chart.jsx","components/countrypicker/CountryPicker.jsx","Bar/Bar.jsx","images/image.png","App.js","index.js"],"names":["Card","className","start","end","this","props","confirmed","duration","separator","lastUpdate","recovered","deaths","Component","Chart","state","dailyData","fetch","response","json","data","setState","labels","map","reportDate","datasets","totalConfirmed","label","borderColor","fill","total","backgroundColor","CountryPicker","countries","laoding","loading","FormControl","NativeSelect","onChange","e","handleCountry","target","value","country","i","name","CountryBar","check","componentDidMount","options","legend","display","title","text","url","App","count","a","Date","toDateString","changeableUrl","src","Image","alt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fe6d85e2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport CountUp from \"react-countup\";\r\n\r\nclass Card extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"container\">\r\n          <div className=\"infected\">\r\n            <div className=\"content\">\r\n              <h2>Infected</h2>\r\n              <h3>\r\n                <CountUp\r\n                  start={0}\r\n                  end={this.props.confirmed}\r\n                  duration={2.5}\r\n                  separator=\",\"\r\n                ></CountUp>\r\n              </h3>\r\n              <h3>{this.props.lastUpdate}</h3>\r\n              <h4>Number of Active cases of covid-19</h4>\r\n            </div>\r\n          </div>\r\n          <div className=\"recovered\">\r\n            <div className=\"content\">\r\n              <h2>Recovered</h2>\r\n              <h3>\r\n                <CountUp\r\n                  start={0}\r\n                  end={this.props.recovered}\r\n                  duration={2.5}\r\n                  separator=\",\"\r\n                ></CountUp>\r\n              </h3>\r\n              <h3>{this.props.lastUpdate}</h3>\r\n              <h4>Number of Recovered cases of covid-19</h4>\r\n            </div>\r\n          </div>\r\n          <div className=\"death\">\r\n            <div className=\"content\">\r\n              <h2>Deaths</h2>\r\n              <h3>\r\n                <CountUp\r\n                  start={0}\r\n                  end={this.props.deaths}\r\n                  duration={2.5}\r\n                  separator=\",\"\r\n                ></CountUp>\r\n              </h3>\r\n              <h3>{this.props.lastUpdate}</h3>\r\n              <h4>Number of Death cases of covid-19</h4>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React, { Component } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api/daily\";\r\n\r\nclass Chart extends Component {\r\n  state = {\r\n    dailyData: [],\r\n  };\r\n  async componentDidMount() {\r\n    let response = await fetch(url);\r\n    let data = await response.json();\r\n    this.setState({ dailyData: data });\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"chart\">\r\n        <Line\r\n          data={{\r\n            labels: this.state.dailyData.map(\r\n              (dailyData) => dailyData.reportDate\r\n            ),\r\n            datasets: [\r\n              {\r\n                data: this.state.dailyData.map(\r\n                  (dailyData) => dailyData.totalConfirmed\r\n                ),\r\n                label: \"Infected\",\r\n                borderColor: \"#3333ff\",\r\n                fill: true,\r\n              },\r\n              {\r\n                data: this.state.dailyData.map((data) => data.deaths.total),\r\n                label: \"Deaths\",\r\n                borderColor: \"red\",\r\n                backgroundColor: \"rgba(255, 0, 0, 0.5)\",\r\n                fill: true,\r\n              },\r\n            ],\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Chart;\r\n","import { FormControl, NativeSelect } from \"@material-ui/core\";\r\nimport React, { Component } from \"react\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api/countries\";\r\n\r\nclass CountryPicker extends Component {\r\n  state = {\r\n    countries: [],\r\n    laoding: true,\r\n  };\r\n\r\n  async componentDidMount() {\r\n    let response = await fetch(url);\r\n    let data = await response.json();\r\n    this.setState({ countries: data.countries });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.loading) return <div>Loading....</div>;\r\n    return (\r\n      <>\r\n        <div className=\"country-picker\">\r\n          <FormControl className=\"picker\">\r\n            <NativeSelect\r\n              onChange={(e) => this.props.handleCountry(e.target.value)}\r\n            >\r\n              <option value=\"global\">Global</option>\r\n              {this.state.countries.map((country, i) => (\r\n                <option key={i} value={country.name}>\r\n                  {country.name}\r\n                </option>\r\n              ))}\r\n            </NativeSelect>\r\n          </FormControl>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CountryPicker;\r\n","import React, { Component } from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\n\r\nlet url = \"https://covid19.mathdro.id/api/countries/\";\r\nlet country = \"\";\r\n\r\nclass CountryBar extends Component {\r\n  state = {\r\n    confirmed: \"\",\r\n    recovered: \"\",\r\n    deaths: \"\",\r\n  };\r\n\r\n  async componentDidMount() {\r\n    let response = await fetch(`${url}${this.props.country}`);\r\n    let data = await response.json();\r\n    this.setState({\r\n      confirmed: data.confirmed.value,\r\n      recovered: data.recovered.value,\r\n      deaths: data.deaths.value,\r\n    });\r\n    country = this.props.country;\r\n  }\r\n\r\n  check = () => {\r\n    if (this.props.country !== country) {\r\n      this.componentDidMount();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    this.check();\r\n    return (\r\n      <>\r\n        <div className=\"bar\">\r\n          <Bar\r\n            data={{\r\n              labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n              datasets: [\r\n                {\r\n                  label: \"People\",\r\n                  backgroundColor: [\r\n                    \"rgba(0, 0, 255, 0.5)\",\r\n                    \"rgba(0, 255, 0, 0.5)\",\r\n                    \"rgba(255, 0, 0, 0.5)\",\r\n                  ],\r\n                  data: [\r\n                    this.state.confirmed,\r\n                    this.state.recovered,\r\n                    this.state.deaths,\r\n                  ],\r\n                },\r\n              ],\r\n            }}\r\n            options={{\r\n              legend: { display: false },\r\n              title: { display: true, text: `Current state in ${country}` },\r\n            }}\r\n          />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CountryBar;\r\n","export default __webpack_public_path__ + \"static/media/image.9e5d4fc7.png\";","\nimport React, { Component } from 'react';\nimport Card from \"./components/cards/Card\"\nimport Chart from \"./components/chart/Chart\"\nimport CountryPicker from \"./components/countrypicker/CountryPicker\"\nimport CountryBar from \"./Bar/Bar\";\nimport Image from './images/image.png'\n\n\nconst url = \"https://covid19.mathdro.id/api\"\nlet country = \"global\"\nclass App extends Component {\n  state = {\n    loading : true,\n    confirmed : \"\",\n    recovered : \"\",\n    deaths : \"\"\n\n    }\n\n  async componentDidMount() {\n    if (country === \"global\") {\n      let response = await fetch(url);\n      let data = await response.json();\n      this.setState({\n        confirmed : data.confirmed.value,\n        recovered : data.recovered.value,\n        deaths : data.deaths.value,\n        lastUpdate : new Date(data.lastUpdate).toDateString(),\n        loading : false\n      })\n    }\n    if (country !== \"global\") {\n    let changeableUrl = `${url}/countries/${country}`\n    let response = await fetch(changeableUrl);\n    let data = await response.json();\n    this.setState({\n      confirmed : data.confirmed.value,\n      recovered : data.recovered.value,\n      deaths : data.deaths.value,\n      lastUpdate : new Date(data.lastUpdate).toDateString()\n    })\n    }\n  }   \n  \n   handleCountry = async (count) => {\n    country = count;\n    this.componentDidMount() \n  }\n  \n\n  render() {\n    if (this.state.loading)\n    return <div className = \"loading\"></div>\n    return (\n\n      <>\n        <img className = \"corona-image\" src = {Image} alt = \"COVID-19\"/>\n        <Card confirmed = {this.state.confirmed}\n              recovered = {this.state.recovered}\n              deaths = {this.state.deaths}\n              lastUpdate = {this.state.lastUpdate}\n              \n        />\n        <CountryPicker handleCountry = {this.handleCountry}/>\n        {country === \"global\" ? <Chart country = {country} /> : <CountryBar country = {country}/>}\n      </>\n    )\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport \"./style.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n"],"sourceRoot":""}